// Vercel Build Cache Buster
// „Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅØ Vercel „ÅÆ„Éì„É´„Éâ„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÁÑ°ÂäπÂåñ„Åó„ÄÅ„Éï„É´„Éì„É´„Éâ„ÇíÂº∑Âà∂„Åó„Åæ„Åô
console.log('='.repeat(80))
console.log('üå∏ SAKURA CLUB - VERCEL BUILD CACHE BUSTER üå∏')
console.log('Forcing full rebuild at:', new Date().toISOString())
console.log('='.repeat(80))

// „Éì„É´„ÉâÊôÇ„ÅÆË©≥Á¥∞„É≠„Ç∞ÊÉÖÂ†±
console.log('üìã BUILD ENVIRONMENT INFO:')
console.log('  Node.js version:', process.version)
console.log('  Platform:', process.platform)
console.log('  Architecture:', process.arch)
console.log('  Working directory:', process.cwd())
console.log('  Memory usage:', JSON.stringify(process.memoryUsage(), null, 2))

// Áí∞Â¢ÉÂ§âÊï∞„ÅÆÁ¢∫Ë™ç
console.log('\nüîß ENVIRONMENT VARIABLES CHECK:')
console.log('  NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ Set' : '‚ùå Not set')
console.log('  NEXT_PUBLIC_SUPABASE_ANON_KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úÖ Set' : '‚ùå Not set')
console.log('  NODE_ENV:', process.env.NODE_ENV || 'undefined')
console.log('  VERCEL:', process.env.VERCEL || 'undefined')
console.log('  CI:', process.env.CI || 'undefined')

// „Éï„Ç°„Ç§„É´„Ç∑„Çπ„ÉÜ„É†„ÅÆÁ¢∫Ë™ç
const fs = require('fs')
const path = require('path')

console.log('\nüìÅ CRITICAL FILES CHECK:')
const criticalFiles = [
  'src/components/ui/button.tsx',
  'src/components/auth/AuthGuard.tsx', 
  'src/store/authStore.ts',
  'src/lib/utils.ts',
  'tsconfig.json',
  'next.config.js'
]

criticalFiles.forEach(filePath => {
  const fullPath = path.join(process.cwd(), filePath)
  const exists = fs.existsSync(fullPath)
  console.log(`  ${filePath}: ${exists ? '‚úÖ EXISTS' : '‚ùå MISSING'}`)
  
  if (exists) {
    const stats = fs.statSync(fullPath)
    console.log(`    Size: ${stats.size} bytes, Modified: ${stats.mtime.toISOString()}`)
  }
})

// tsconfig.json„ÅÆÂÜÖÂÆπÁ¢∫Ë™ç
console.log('\n‚öôÔ∏è  TSCONFIG PATHS CHECK:')
try {
  const tsconfigPath = path.join(process.cwd(), 'tsconfig.json')
  const tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'))
  console.log('  BaseURL:', tsconfig.compilerOptions?.baseUrl || 'undefined')
  console.log('  Paths:', JSON.stringify(tsconfig.compilerOptions?.paths || {}, null, 4))
} catch (error) {
  console.log('  ‚ùå Error reading tsconfig.json:', error.message)
}

console.log('\n' + '='.repeat(80))
console.log('üöÄ CACHE BUSTER COMPLETED - PROCEEDING TO BUILD')
console.log('='.repeat(80) + '\n')

module.exports = {}